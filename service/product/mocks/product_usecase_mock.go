// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/product/model"

	mock "github.com/stretchr/testify/mock"

	util "th3y3m/e-commerce-microservices/pkg/util"
)

// IProductUsecase is an autogenerated mock type for the IProductUsecase type
type IProductUsecase struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, req
func (_m *IProductUsecase) CreateProduct(ctx context.Context, req *model.CreateProductRequest) (*model.GetProductResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *model.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateProductRequest) (*model.GetProductResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateProductRequest) *model.GetProductResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateProductRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, req
func (_m *IProductUsecase) DeleteProduct(ctx context.Context, req *model.DeleteProductRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteProductRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields: ctx
func (_m *IProductUsecase) GetAllProducts(ctx context.Context) ([]*model.GetProductResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []*model.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.GetProductResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.GetProductResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, req
func (_m *IProductUsecase) GetProduct(ctx context.Context, req *model.GetProductRequest) (*model.GetProductResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *model.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductRequest) (*model.GetProductResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductRequest) *model.GetProductResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetProductRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductList provides a mock function with given fields: ctx, req
func (_m *IProductUsecase) GetProductList(ctx context.Context, req *model.GetProductsRequest) (*util.PaginatedList[model.GetProductListResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetProductList")
	}

	var r0 *util.PaginatedList[model.GetProductListResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductsRequest) (*util.PaginatedList[model.GetProductListResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductsRequest) *util.PaginatedList[model.GetProductListResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.PaginatedList[model.GetProductListResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetProductsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductPriceAfterDiscount provides a mock function with given fields: ctx, req
func (_m *IProductUsecase) GetProductPriceAfterDiscount(ctx context.Context, req *model.GetProductPriceAfterDiscount) (float64, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetProductPriceAfterDiscount")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductPriceAfterDiscount) (float64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductPriceAfterDiscount) float64); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetProductPriceAfterDiscount) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInventory provides a mock function with given fields: ctx, userId, cartId
func (_m *IProductUsecase) UpdateInventory(ctx context.Context, userId int64, cartId int64) error {
	ret := _m.Called(ctx, userId, cartId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInventory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userId, cartId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: ctx, rep
func (_m *IProductUsecase) UpdateProduct(ctx context.Context, rep *model.UpdateProductRequest) (*model.GetProductResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *model.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateProductRequest) (*model.GetProductResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateProductRequest) *model.GetProductResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateProductRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductUsecase creates a new instance of IProductUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductUsecase {
	mock := &IProductUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
