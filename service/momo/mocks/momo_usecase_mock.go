// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	url "net/url"
	model "th3y3m/e-commerce-microservices/service/momo/model"

	mock "github.com/stretchr/testify/mock"
)

// IMoMoUsecase is an autogenerated mock type for the IMoMoUsecase type
type IMoMoUsecase struct {
	mock.Mock
}

// CreateMoMoUrl provides a mock function with given fields: amount, orderId
func (_m *IMoMoUsecase) CreateMoMoUrl(amount float64, orderId string) (string, error) {
	ret := _m.Called(amount, orderId)

	if len(ret) == 0 {
		panic("no return value specified for CreateMoMoUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, string) (string, error)); ok {
		return rf(amount, orderId)
	}
	if rf, ok := ret.Get(0).(func(float64, string) string); ok {
		r0 = rf(amount, orderId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(float64, string) error); ok {
		r1 = rf(amount, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateMoMoResponse provides a mock function with given fields: queryString
func (_m *IMoMoUsecase) ValidateMoMoResponse(queryString url.Values) (*model.PaymentResponse, error) {
	ret := _m.Called(queryString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMoMoResponse")
	}

	var r0 *model.PaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(url.Values) (*model.PaymentResponse, error)); ok {
		return rf(queryString)
	}
	if rf, ok := ret.Get(0).(func(url.Values) *model.PaymentResponse); ok {
		r0 = rf(queryString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(url.Values) error); ok {
		r1 = rf(queryString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIMoMoUsecase creates a new instance of IMoMoUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMoMoUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMoMoUsecase {
	mock := &IMoMoUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
