// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/category/model"

	mock "github.com/stretchr/testify/mock"
)

// ICategoryUsecase is an autogenerated mock type for the ICategoryUsecase type
type ICategoryUsecase struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: ctx, req
func (_m *ICategoryUsecase) CreateCategory(ctx context.Context, req *model.CreateCategoryRequest) (*model.GetCategoryResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 *model.GetCategoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateCategoryRequest) (*model.GetCategoryResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateCategoryRequest) *model.GetCategoryResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCategoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateCategoryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: ctx, req
func (_m *ICategoryUsecase) DeleteCategory(ctx context.Context, req *model.DeleteCategoryRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteCategoryRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCategorys provides a mock function with given fields: ctx
func (_m *ICategoryUsecase) GetAllCategorys(ctx context.Context) ([]*model.GetCategoryResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCategorys")
	}

	var r0 []*model.GetCategoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.GetCategoryResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.GetCategoryResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetCategoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategory provides a mock function with given fields: ctx, req
func (_m *ICategoryUsecase) GetCategory(ctx context.Context, req *model.GetCategoryRequest) (*model.GetCategoryResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 *model.GetCategoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCategoryRequest) (*model.GetCategoryResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCategoryRequest) *model.GetCategoryResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCategoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetCategoryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: ctx, rep
func (_m *ICategoryUsecase) UpdateCategory(ctx context.Context, rep *model.UpdateCategoryRequest) (*model.GetCategoryResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 *model.GetCategoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateCategoryRequest) (*model.GetCategoryResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateCategoryRequest) *model.GetCategoryResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCategoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateCategoryRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICategoryUsecase creates a new instance of ICategoryUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICategoryUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICategoryUsecase {
	mock := &ICategoryUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
