// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/mail/model"

	mock "github.com/stretchr/testify/mock"
)

// IMailUsecase is an autogenerated mock type for the IMailUsecase type
type IMailUsecase struct {
	mock.Mock
}

// SendMail provides a mock function with given fields: to, token
func (_m *IMailUsecase) SendMail(to string, token string) error {
	ret := _m.Called(to, token)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(to, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNotification provides a mock function with given fields: ctx, orderID, url
func (_m *IMailUsecase) SendNotification(ctx context.Context, orderID int64, url string) error {
	ret := _m.Called(ctx, orderID, url)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, orderID, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendOrderDetails provides a mock function with given fields: Customer, Order, OrderDetails, urlPayment
func (_m *IMailUsecase) SendOrderDetails(Customer model.User, Order model.Order, OrderDetails []model.OrderDetail, urlPayment string) error {
	ret := _m.Called(Customer, Order, OrderDetails, urlPayment)

	if len(ret) == 0 {
		panic("no return value specified for SendOrderDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, model.Order, []model.OrderDetail, string) error); ok {
		r0 = rf(Customer, Order, OrderDetails, urlPayment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMailUsecase creates a new instance of IMailUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMailUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMailUsecase {
	mock := &IMailUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
