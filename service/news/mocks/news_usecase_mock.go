// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/news/model"

	mock "github.com/stretchr/testify/mock"

	util "th3y3m/e-commerce-microservices/pkg/util"
)

// INewUsecase is an autogenerated mock type for the INewUsecase type
type INewUsecase struct {
	mock.Mock
}

// CreateNews provides a mock function with given fields: ctx, req
func (_m *INewUsecase) CreateNews(ctx context.Context, req *model.CreateNewsRequest) (*model.GetNewsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateNews")
	}

	var r0 *model.GetNewsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateNewsRequest) (*model.GetNewsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateNewsRequest) *model.GetNewsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetNewsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateNewsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNews provides a mock function with given fields: ctx, req
func (_m *INewUsecase) DeleteNews(ctx context.Context, req *model.DeleteNewsRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNews")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteNewsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNews provides a mock function with given fields: ctx
func (_m *INewUsecase) GetAllNews(ctx context.Context) ([]*model.GetNewsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNews")
	}

	var r0 []*model.GetNewsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.GetNewsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.GetNewsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetNewsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNews provides a mock function with given fields: ctx, req
func (_m *INewUsecase) GetNews(ctx context.Context, req *model.GetNewRequest) (*model.GetNewsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetNews")
	}

	var r0 *model.GetNewsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetNewRequest) (*model.GetNewsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetNewRequest) *model.GetNewsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetNewsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetNewRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewsList provides a mock function with given fields: ctx, req
func (_m *INewUsecase) GetNewsList(ctx context.Context, req *model.GetNewsRequest) (*util.PaginatedList[model.GetNewsResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetNewsList")
	}

	var r0 *util.PaginatedList[model.GetNewsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetNewsRequest) (*util.PaginatedList[model.GetNewsResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetNewsRequest) *util.PaginatedList[model.GetNewsResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.PaginatedList[model.GetNewsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetNewsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNews provides a mock function with given fields: ctx, rep
func (_m *INewUsecase) UpdateNews(ctx context.Context, rep *model.UpdateNewsRequest) (*model.GetNewsResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNews")
	}

	var r0 *model.GetNewsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateNewsRequest) (*model.GetNewsResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateNewsRequest) *model.GetNewsResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetNewsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateNewsRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewINewUsecase creates a new instance of INewUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewINewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *INewUsecase {
	mock := &INewUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
