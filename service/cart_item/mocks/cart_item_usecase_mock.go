// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/cart_item/model"

	mock "github.com/stretchr/testify/mock"
)

// ICartItemUsecase is an autogenerated mock type for the ICartItemUsecase type
type ICartItemUsecase struct {
	mock.Mock
}

// CreateCartItem provides a mock function with given fields: ctx, req
func (_m *ICartItemUsecase) CreateCartItem(ctx context.Context, req *model.CreateCartItemRequest) (*model.GetCartItemResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateCartItem")
	}

	var r0 *model.GetCartItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateCartItemRequest) (*model.GetCartItemResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateCartItemRequest) *model.GetCartItemResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCartItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateCartItemRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartItem provides a mock function with given fields: ctx, req
func (_m *ICartItemUsecase) DeleteCartItem(ctx context.Context, req *model.DeleteCartItemRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteCartItemRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartItem provides a mock function with given fields: ctx, req
func (_m *ICartItemUsecase) GetCartItem(ctx context.Context, req *model.GetCartItemRequest) (*model.GetCartItemResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCartItem")
	}

	var r0 *model.GetCartItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCartItemRequest) (*model.GetCartItemResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCartItemRequest) *model.GetCartItemResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCartItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetCartItemRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItemList provides a mock function with given fields: ctx, req
func (_m *ICartItemUsecase) GetCartItemList(ctx context.Context, req *model.GetCartItemsRequest) ([]*model.GetCartItemResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCartItemList")
	}

	var r0 []*model.GetCartItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCartItemsRequest) ([]*model.GetCartItemResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCartItemsRequest) []*model.GetCartItemResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetCartItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetCartItemsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCartItem provides a mock function with given fields: ctx, rep
func (_m *ICartItemUsecase) UpdateCartItem(ctx context.Context, rep *model.UpdateCartItemRequest) (*model.GetCartItemResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCartItem")
	}

	var r0 *model.GetCartItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateCartItemRequest) (*model.GetCartItemResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateCartItemRequest) *model.GetCartItemResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCartItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateCartItemRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrCreate provides a mock function with given fields: ctx, cartItem
func (_m *ICartItemUsecase) UpdateOrCreate(ctx context.Context, cartItem *model.UpdateOrCreateRequest) error {
	ret := _m.Called(ctx, cartItem)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateOrCreateRequest) error); ok {
		r0 = rf(ctx, cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICartItemUsecase creates a new instance of ICartItemUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICartItemUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICartItemUsecase {
	mock := &ICartItemUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
