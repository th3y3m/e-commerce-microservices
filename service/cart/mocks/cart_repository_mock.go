// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	repository "th3y3m/e-commerce-microservices/service/cart/repository"

	mock "github.com/stretchr/testify/mock"
)

// ICartRepository is an autogenerated mock type for the ICartRepository type
type ICartRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, cart
func (_m *ICartRepository) Create(ctx context.Context, cart *repository.Cart) (*repository.Cart, error) {
	ret := _m.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *repository.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Cart) (*repository.Cart, error)); ok {
		return rf(ctx, cart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Cart) *repository.Cart); ok {
		r0 = rf(ctx, cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.Cart) error); ok {
		r1 = rf(ctx, cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, cartID
func (_m *ICartRepository) Delete(ctx context.Context, cartID int64) error {
	ret := _m.Called(ctx, cartID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, cartID
func (_m *ICartRepository) Get(ctx context.Context, cartID *int64) (*repository.Cart, error) {
	ret := _m.Called(ctx, cartID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *repository.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64) (*repository.Cart, error)); ok {
		return rf(ctx, cartID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int64) *repository.Cart); ok {
		r0 = rf(ctx, cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int64) error); ok {
		r1 = rf(ctx, cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCart provides a mock function with given fields: ctx, userID
func (_m *ICartRepository) GetUserCart(ctx context.Context, userID int64) (*repository.Cart, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCart")
	}

	var r0 *repository.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*repository.Cart, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *repository.Cart); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, cart
func (_m *ICartRepository) Update(ctx context.Context, cart *repository.Cart) (*repository.Cart, error) {
	ret := _m.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *repository.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Cart) (*repository.Cart, error)); ok {
		return rf(ctx, cart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Cart) *repository.Cart); ok {
		r0 = rf(ctx, cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.Cart) error); ok {
		r1 = rf(ctx, cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICartRepository creates a new instance of ICartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICartRepository {
	mock := &ICartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
