// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/user/model"

	mock "github.com/stretchr/testify/mock"

	util "th3y3m/e-commerce-microservices/pkg/util"
)

// IUserUsecase is an autogenerated mock type for the IUserUsecase type
type IUserUsecase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *IUserUsecase) CreateUser(ctx context.Context, req *model.CreateUserRequest) (*model.GetUserResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateUserRequest) (*model.GetUserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateUserRequest) *model.GetUserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, req
func (_m *IUserUsecase) DeleteUser(ctx context.Context, req *model.DeleteUserRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteUserRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *IUserUsecase) GetAllUsers(ctx context.Context) ([]*model.GetUserResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*model.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.GetUserResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.GetUserResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, req
func (_m *IUserUsecase) GetUser(ctx context.Context, req *model.GetUserRequest) (*model.GetUserResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetUserRequest) (*model.GetUserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetUserRequest) *model.GetUserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: ctx, req
func (_m *IUserUsecase) GetUserList(ctx context.Context, req *model.GetUsersRequest) (*util.PaginatedList[model.GetUserResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUserList")
	}

	var r0 *util.PaginatedList[model.GetUserResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetUsersRequest) (*util.PaginatedList[model.GetUserResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetUsersRequest) *util.PaginatedList[model.GetUserResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.PaginatedList[model.GetUserResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetUsersRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, rep
func (_m *IUserUsecase) UpdateUser(ctx context.Context, rep *model.UpdateUserRequest) (*model.GetUserResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *model.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateUserRequest) (*model.GetUserResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateUserRequest) *model.GetUserResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateUserRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: ctx, token, userID
func (_m *IUserUsecase) VerifyToken(ctx context.Context, token string, userID int64) (bool, error) {
	ret := _m.Called(ctx, token, userID)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (bool, error)); ok {
		return rf(ctx, token, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) bool); ok {
		r0 = rf(ctx, token, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, token, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserUsecase creates a new instance of IUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUsecase {
	mock := &IUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
