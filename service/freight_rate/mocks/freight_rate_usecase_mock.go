// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/freight_rate/model"

	mock "github.com/stretchr/testify/mock"
)

// IFreightRateUsecase is an autogenerated mock type for the IFreightRateUsecase type
type IFreightRateUsecase struct {
	mock.Mock
}

// CreateFreightRate provides a mock function with given fields: ctx, req
func (_m *IFreightRateUsecase) CreateFreightRate(ctx context.Context, req *model.CreateFreightRateRequest) (*model.GetFreightRateResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateFreightRate")
	}

	var r0 *model.GetFreightRateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateFreightRateRequest) (*model.GetFreightRateResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateFreightRateRequest) *model.GetFreightRateResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetFreightRateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateFreightRateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFreightRate provides a mock function with given fields: ctx, req
func (_m *IFreightRateUsecase) DeleteFreightRate(ctx context.Context, req *model.DeleteFreightRateRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFreightRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteFreightRateRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFreightRates provides a mock function with given fields: ctx
func (_m *IFreightRateUsecase) GetAllFreightRates(ctx context.Context) ([]*model.GetFreightRateResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFreightRates")
	}

	var r0 []*model.GetFreightRateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.GetFreightRateResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.GetFreightRateResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetFreightRateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFreightRate provides a mock function with given fields: ctx, req
func (_m *IFreightRateUsecase) GetFreightRate(ctx context.Context, req *model.GetFreightRateRequest) (*model.GetFreightRateResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetFreightRate")
	}

	var r0 *model.GetFreightRateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetFreightRateRequest) (*model.GetFreightRateResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetFreightRateRequest) *model.GetFreightRateResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetFreightRateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetFreightRateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFreightRate provides a mock function with given fields: ctx, rep
func (_m *IFreightRateUsecase) UpdateFreightRate(ctx context.Context, rep *model.UpdateFreightRateRequest) (*model.GetFreightRateResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFreightRate")
	}

	var r0 *model.GetFreightRateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateFreightRateRequest) (*model.GetFreightRateResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateFreightRateRequest) *model.GetFreightRateResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetFreightRateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateFreightRateRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFreightRateUsecase creates a new instance of IFreightRateUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFreightRateUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFreightRateUsecase {
	mock := &IFreightRateUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
