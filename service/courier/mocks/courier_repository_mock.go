// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	repository "th3y3m/e-commerce-microservices/service/courier/repository"

	mock "github.com/stretchr/testify/mock"
)

// ICourierRepository is an autogenerated mock type for the ICourierRepository type
type ICourierRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, courier
func (_m *ICourierRepository) Create(ctx context.Context, courier *repository.Courier) (*repository.Courier, error) {
	ret := _m.Called(ctx, courier)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *repository.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Courier) (*repository.Courier, error)); ok {
		return rf(ctx, courier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Courier) *repository.Courier); ok {
		r0 = rf(ctx, courier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.Courier) error); ok {
		r1 = rf(ctx, courier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, courierID
func (_m *ICourierRepository) Delete(ctx context.Context, courierID int64) error {
	ret := _m.Called(ctx, courierID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, courierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, courierID
func (_m *ICourierRepository) Get(ctx context.Context, courierID int64) (*repository.Courier, error) {
	ret := _m.Called(ctx, courierID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *repository.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*repository.Courier, error)); ok {
		return rf(ctx, courierID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *repository.Courier); ok {
		r0 = rf(ctx, courierID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, courierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *ICourierRepository) GetAll(ctx context.Context) ([]*repository.Courier, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*repository.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*repository.Courier, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*repository.Courier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, courier
func (_m *ICourierRepository) Update(ctx context.Context, courier *repository.Courier) (*repository.Courier, error) {
	ret := _m.Called(ctx, courier)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *repository.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Courier) (*repository.Courier, error)); ok {
		return rf(ctx, courier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Courier) *repository.Courier); ok {
		r0 = rf(ctx, courier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.Courier) error); ok {
		r1 = rf(ctx, courier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICourierRepository creates a new instance of ICourierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICourierRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICourierRepository {
	mock := &ICourierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
