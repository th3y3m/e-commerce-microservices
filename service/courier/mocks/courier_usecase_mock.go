// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/courier/model"

	mock "github.com/stretchr/testify/mock"
)

// ICourierUsecase is an autogenerated mock type for the ICourierUsecase type
type ICourierUsecase struct {
	mock.Mock
}

// CreateCourier provides a mock function with given fields: ctx, req
func (_m *ICourierUsecase) CreateCourier(ctx context.Context, req *model.CreateCourierRequest) (*model.GetCourierResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateCourier")
	}

	var r0 *model.GetCourierResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateCourierRequest) (*model.GetCourierResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateCourierRequest) *model.GetCourierResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCourierResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateCourierRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCourier provides a mock function with given fields: ctx, req
func (_m *ICourierUsecase) DeleteCourier(ctx context.Context, req *model.DeleteCourierRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCourier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteCourierRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCouriers provides a mock function with given fields: ctx
func (_m *ICourierUsecase) GetAllCouriers(ctx context.Context) ([]*model.GetCourierResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCouriers")
	}

	var r0 []*model.GetCourierResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.GetCourierResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.GetCourierResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetCourierResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourier provides a mock function with given fields: ctx, req
func (_m *ICourierUsecase) GetCourier(ctx context.Context, req *model.GetCourierRequest) (*model.GetCourierResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCourier")
	}

	var r0 *model.GetCourierResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCourierRequest) (*model.GetCourierResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetCourierRequest) *model.GetCourierResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCourierResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetCourierRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCourier provides a mock function with given fields: ctx, rep
func (_m *ICourierUsecase) UpdateCourier(ctx context.Context, rep *model.UpdateCourierRequest) (*model.GetCourierResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCourier")
	}

	var r0 *model.GetCourierResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateCourierRequest) (*model.GetCourierResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateCourierRequest) *model.GetCourierResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetCourierResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateCourierRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICourierUsecase creates a new instance of ICourierUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICourierUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICourierUsecase {
	mock := &ICourierUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
