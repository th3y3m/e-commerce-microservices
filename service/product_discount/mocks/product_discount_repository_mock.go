// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/product_discount/model"

	mock "github.com/stretchr/testify/mock"

	repository "th3y3m/e-commerce-microservices/service/product_discount/repository"
)

// IProductDiscountRepository is an autogenerated mock type for the IProductDiscountRepository type
type IProductDiscountRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, productDiscount
func (_m *IProductDiscountRepository) Create(ctx context.Context, productDiscount *repository.ProductDiscount) (*repository.ProductDiscount, error) {
	ret := _m.Called(ctx, productDiscount)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *repository.ProductDiscount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.ProductDiscount) (*repository.ProductDiscount, error)); ok {
		return rf(ctx, productDiscount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.ProductDiscount) *repository.ProductDiscount); ok {
		r0 = rf(ctx, productDiscount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.ProductDiscount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.ProductDiscount) error); ok {
		r1 = rf(ctx, productDiscount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, productID, discountID
func (_m *IProductDiscountRepository) Delete(ctx context.Context, productID int64, discountID int64) error {
	ret := _m.Called(ctx, productID, discountID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, productID, discountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, req
func (_m *IProductDiscountRepository) Get(ctx context.Context, req *model.GetProductDiscountsRequest) ([]*repository.ProductDiscount, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*repository.ProductDiscount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductDiscountsRequest) ([]*repository.ProductDiscount, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductDiscountsRequest) []*repository.ProductDiscount); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.ProductDiscount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetProductDiscountsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductDiscountRepository creates a new instance of IProductDiscountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductDiscountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductDiscountRepository {
	mock := &IProductDiscountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
