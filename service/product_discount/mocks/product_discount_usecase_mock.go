// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/product_discount/model"

	mock "github.com/stretchr/testify/mock"
)

// IProductDiscountUsecase is an autogenerated mock type for the IProductDiscountUsecase type
type IProductDiscountUsecase struct {
	mock.Mock
}

// CreateProductDiscount provides a mock function with given fields: ctx, req
func (_m *IProductDiscountUsecase) CreateProductDiscount(ctx context.Context, req *model.CreateProductDiscountRequest) (*model.GetProductDiscountResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateProductDiscount")
	}

	var r0 *model.GetProductDiscountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateProductDiscountRequest) (*model.GetProductDiscountResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateProductDiscountRequest) *model.GetProductDiscountResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetProductDiscountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateProductDiscountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductDiscount provides a mock function with given fields: ctx, req
func (_m *IProductDiscountUsecase) DeleteProductDiscount(ctx context.Context, req *model.DeleteProductDiscountRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductDiscount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteProductDiscountRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductDiscountList provides a mock function with given fields: ctx, req
func (_m *IProductDiscountUsecase) GetProductDiscountList(ctx context.Context, req *model.GetProductDiscountsRequest) ([]*model.GetProductDiscountResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetProductDiscountList")
	}

	var r0 []*model.GetProductDiscountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductDiscountsRequest) ([]*model.GetProductDiscountResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProductDiscountsRequest) []*model.GetProductDiscountResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetProductDiscountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetProductDiscountsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductDiscountUsecase creates a new instance of IProductDiscountUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductDiscountUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductDiscountUsecase {
	mock := &IProductDiscountUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
