// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	url "net/url"
	model "th3y3m/e-commerce-microservices/service/vnpay/model"

	mock "github.com/stretchr/testify/mock"
)

// IVnpayUsecase is an autogenerated mock type for the IVnpayUsecase type
type IVnpayUsecase struct {
	mock.Mock
}

// CreateVNPayUrl provides a mock function with given fields: amount, orderinfor
func (_m *IVnpayUsecase) CreateVNPayUrl(amount float64, orderinfor string) (string, error) {
	ret := _m.Called(amount, orderinfor)

	if len(ret) == 0 {
		panic("no return value specified for CreateVNPayUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, string) (string, error)); ok {
		return rf(amount, orderinfor)
	}
	if rf, ok := ret.Get(0).(func(float64, string) string); ok {
		r0 = rf(amount, orderinfor)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(float64, string) error); ok {
		r1 = rf(amount, orderinfor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateVNPayResponse provides a mock function with given fields: queryString
func (_m *IVnpayUsecase) ValidateVNPayResponse(queryString url.Values) (*model.PaymentResponse, error) {
	ret := _m.Called(queryString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateVNPayResponse")
	}

	var r0 *model.PaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(url.Values) (*model.PaymentResponse, error)); ok {
		return rf(queryString)
	}
	if rf, ok := ret.Get(0).(func(url.Values) *model.PaymentResponse); ok {
		r0 = rf(queryString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(url.Values) error); ok {
		r1 = rf(queryString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIVnpayUsecase creates a new instance of IVnpayUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVnpayUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVnpayUsecase {
	mock := &IVnpayUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
