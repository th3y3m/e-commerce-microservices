// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/order_detail/model"

	mock "github.com/stretchr/testify/mock"

	repository "th3y3m/e-commerce-microservices/service/order_detail/repository"
)

// IOrderDetailRepository is an autogenerated mock type for the IOrderDetailRepository type
type IOrderDetailRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, orderDetail
func (_m *IOrderDetailRepository) Create(ctx context.Context, orderDetail *repository.OrderDetail) (*repository.OrderDetail, error) {
	ret := _m.Called(ctx, orderDetail)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *repository.OrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.OrderDetail) (*repository.OrderDetail, error)); ok {
		return rf(ctx, orderDetail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.OrderDetail) *repository.OrderDetail); ok {
		r0 = rf(ctx, orderDetail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.OrderDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.OrderDetail) error); ok {
		r1 = rf(ctx, orderDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, orderID, productID
func (_m *IOrderDetailRepository) Delete(ctx context.Context, orderID int64, productID int64) error {
	ret := _m.Called(ctx, orderID, productID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, orderID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, orderID, productID
func (_m *IOrderDetailRepository) Get(ctx context.Context, orderID int64, productID int64) (*repository.OrderDetail, error) {
	ret := _m.Called(ctx, orderID, productID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *repository.OrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*repository.OrderDetail, error)); ok {
		return rf(ctx, orderID, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *repository.OrderDetail); ok {
		r0 = rf(ctx, orderID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.OrderDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, orderID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, req
func (_m *IOrderDetailRepository) GetList(ctx context.Context, req *model.GetOrderDetailsRequest) ([]*repository.OrderDetail, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []*repository.OrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetOrderDetailsRequest) ([]*repository.OrderDetail, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetOrderDetailsRequest) []*repository.OrderDetail); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.OrderDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetOrderDetailsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, orderDetail
func (_m *IOrderDetailRepository) Update(ctx context.Context, orderDetail *repository.OrderDetail) (*repository.OrderDetail, error) {
	ret := _m.Called(ctx, orderDetail)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *repository.OrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.OrderDetail) (*repository.OrderDetail, error)); ok {
		return rf(ctx, orderDetail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.OrderDetail) *repository.OrderDetail); ok {
		r0 = rf(ctx, orderDetail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.OrderDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.OrderDetail) error); ok {
		r1 = rf(ctx, orderDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOrderDetailRepository creates a new instance of IOrderDetailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderDetailRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderDetailRepository {
	mock := &IOrderDetailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
