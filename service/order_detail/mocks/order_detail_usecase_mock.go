// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/order_detail/model"

	mock "github.com/stretchr/testify/mock"
)

// IOrderDetailUsecase is an autogenerated mock type for the IOrderDetailUsecase type
type IOrderDetailUsecase struct {
	mock.Mock
}

// CreateOrderDetail provides a mock function with given fields: ctx, req
func (_m *IOrderDetailUsecase) CreateOrderDetail(ctx context.Context, req *model.CreateOrderDetailRequest) (*model.GetOrderDetailResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderDetail")
	}

	var r0 *model.GetOrderDetailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateOrderDetailRequest) (*model.GetOrderDetailResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateOrderDetailRequest) *model.GetOrderDetailResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetOrderDetailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateOrderDetailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrderDetail provides a mock function with given fields: ctx, req
func (_m *IOrderDetailUsecase) DeleteOrderDetail(ctx context.Context, req *model.DeleteOrderDetailRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrderDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteOrderDetailRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderDetail provides a mock function with given fields: ctx, req
func (_m *IOrderDetailUsecase) GetOrderDetail(ctx context.Context, req *model.GetOrderDetailRequest) (*model.GetOrderDetailResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderDetail")
	}

	var r0 *model.GetOrderDetailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetOrderDetailRequest) (*model.GetOrderDetailResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetOrderDetailRequest) *model.GetOrderDetailResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetOrderDetailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetOrderDetailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetailList provides a mock function with given fields: ctx, req
func (_m *IOrderDetailUsecase) GetOrderDetailList(ctx context.Context, req *model.GetOrderDetailsRequest) ([]*model.GetOrderDetailResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderDetailList")
	}

	var r0 []*model.GetOrderDetailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetOrderDetailsRequest) ([]*model.GetOrderDetailResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetOrderDetailsRequest) []*model.GetOrderDetailResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetOrderDetailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetOrderDetailsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderDetail provides a mock function with given fields: ctx, rep
func (_m *IOrderDetailUsecase) UpdateOrderDetail(ctx context.Context, rep *model.UpdateOrderDetailRequest) (*model.GetOrderDetailResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderDetail")
	}

	var r0 *model.GetOrderDetailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateOrderDetailRequest) (*model.GetOrderDetailResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateOrderDetailRequest) *model.GetOrderDetailResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetOrderDetailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateOrderDetailRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOrderDetailUsecase creates a new instance of IOrderDetailUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderDetailUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderDetailUsecase {
	mock := &IOrderDetailUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
