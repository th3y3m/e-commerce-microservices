// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/review/model"

	mock "github.com/stretchr/testify/mock"

	util "th3y3m/e-commerce-microservices/pkg/util"
)

// IReviewUsecase is an autogenerated mock type for the IReviewUsecase type
type IReviewUsecase struct {
	mock.Mock
}

// CreateReview provides a mock function with given fields: ctx, req
func (_m *IReviewUsecase) CreateReview(ctx context.Context, req *model.CreateReviewRequest) (*model.GetReviewResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateReview")
	}

	var r0 *model.GetReviewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateReviewRequest) (*model.GetReviewResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateReviewRequest) *model.GetReviewResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetReviewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateReviewRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReview provides a mock function with given fields: ctx, req
func (_m *IReviewUsecase) DeleteReview(ctx context.Context, req *model.DeleteReviewRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteReviewRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllReviews provides a mock function with given fields: ctx
func (_m *IReviewUsecase) GetAllReviews(ctx context.Context) ([]*model.GetReviewResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllReviews")
	}

	var r0 []*model.GetReviewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.GetReviewResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.GetReviewResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetReviewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReview provides a mock function with given fields: ctx, req
func (_m *IReviewUsecase) GetReview(ctx context.Context, req *model.GetReviewRequest) (*model.GetReviewResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetReview")
	}

	var r0 *model.GetReviewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetReviewRequest) (*model.GetReviewResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetReviewRequest) *model.GetReviewResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetReviewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetReviewRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewList provides a mock function with given fields: ctx, req
func (_m *IReviewUsecase) GetReviewList(ctx context.Context, req *model.GetReviewsRequest) (*util.PaginatedList[model.GetReviewResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewList")
	}

	var r0 *util.PaginatedList[model.GetReviewResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetReviewsRequest) (*util.PaginatedList[model.GetReviewResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetReviewsRequest) *util.PaginatedList[model.GetReviewResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.PaginatedList[model.GetReviewResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetReviewsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReview provides a mock function with given fields: ctx, rep
func (_m *IReviewUsecase) UpdateReview(ctx context.Context, rep *model.UpdateReviewRequest) (*model.GetReviewResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReview")
	}

	var r0 *model.GetReviewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateReviewRequest) (*model.GetReviewResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateReviewRequest) *model.GetReviewResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetReviewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateReviewRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIReviewUsecase creates a new instance of IReviewUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIReviewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IReviewUsecase {
	mock := &IReviewUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
