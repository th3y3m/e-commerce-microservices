// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "th3y3m/e-commerce-microservices/service/voucher/model"

	mock "github.com/stretchr/testify/mock"

	util "th3y3m/e-commerce-microservices/pkg/util"
)

// IVoucherUsecase is an autogenerated mock type for the IVoucherUsecase type
type IVoucherUsecase struct {
	mock.Mock
}

// CheckVoucherUsage provides a mock function with given fields: ctx, req
func (_m *IVoucherUsecase) CheckVoucherUsage(ctx context.Context, req *model.CheckVoucherUsageRequest) (bool, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CheckVoucherUsage")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CheckVoucherUsageRequest) (bool, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CheckVoucherUsageRequest) bool); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CheckVoucherUsageRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoucher provides a mock function with given fields: ctx, req
func (_m *IVoucherUsecase) CreateVoucher(ctx context.Context, req *model.CreateVoucherRequest) (*model.GetVoucherResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoucher")
	}

	var r0 *model.GetVoucherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateVoucherRequest) (*model.GetVoucherResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateVoucherRequest) *model.GetVoucherResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetVoucherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateVoucherRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoucher provides a mock function with given fields: ctx, req
func (_m *IVoucherUsecase) DeleteVoucher(ctx context.Context, req *model.DeleteVoucherRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoucher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteVoucherRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllVouchers provides a mock function with given fields: ctx
func (_m *IVoucherUsecase) GetAllVouchers(ctx context.Context) ([]*model.GetVoucherResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVouchers")
	}

	var r0 []*model.GetVoucherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.GetVoucherResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.GetVoucherResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetVoucherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucher provides a mock function with given fields: ctx, req
func (_m *IVoucherUsecase) GetVoucher(ctx context.Context, req *model.GetVoucherRequest) (*model.GetVoucherResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetVoucher")
	}

	var r0 *model.GetVoucherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetVoucherRequest) (*model.GetVoucherResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetVoucherRequest) *model.GetVoucherResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetVoucherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetVoucherRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherList provides a mock function with given fields: ctx, req
func (_m *IVoucherUsecase) GetVoucherList(ctx context.Context, req *model.GetVouchersRequest) (*util.PaginatedList[model.GetVoucherResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetVoucherList")
	}

	var r0 *util.PaginatedList[model.GetVoucherResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetVouchersRequest) (*util.PaginatedList[model.GetVoucherResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetVouchersRequest) *util.PaginatedList[model.GetVoucherResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.PaginatedList[model.GetVoucherResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetVouchersRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoucher provides a mock function with given fields: ctx, rep
func (_m *IVoucherUsecase) UpdateVoucher(ctx context.Context, rep *model.UpdateVoucherRequest) (*model.GetVoucherResponse, error) {
	ret := _m.Called(ctx, rep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoucher")
	}

	var r0 *model.GetVoucherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateVoucherRequest) (*model.GetVoucherResponse, error)); ok {
		return rf(ctx, rep)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateVoucherRequest) *model.GetVoucherResponse); ok {
		r0 = rf(ctx, rep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetVoucherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateVoucherRequest) error); ok {
		r1 = rf(ctx, rep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIVoucherUsecase creates a new instance of IVoucherUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVoucherUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVoucherUsecase {
	mock := &IVoucherUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
