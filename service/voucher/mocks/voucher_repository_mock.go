// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "th3y3m/e-commerce-microservices/service/voucher/model"

	repository "th3y3m/e-commerce-microservices/service/voucher/repository"
)

// IVoucherRepository is an autogenerated mock type for the IVoucherRepository type
type IVoucherRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, voucher
func (_m *IVoucherRepository) Create(ctx context.Context, voucher *repository.Voucher) (*repository.Voucher, error) {
	ret := _m.Called(ctx, voucher)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *repository.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Voucher) (*repository.Voucher, error)); ok {
		return rf(ctx, voucher)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Voucher) *repository.Voucher); ok {
		r0 = rf(ctx, voucher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.Voucher) error); ok {
		r1 = rf(ctx, voucher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, voucherID
func (_m *IVoucherRepository) Delete(ctx context.Context, voucherID int64) error {
	ret := _m.Called(ctx, voucherID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, voucherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, voucherID
func (_m *IVoucherRepository) Get(ctx context.Context, voucherID int64) (*repository.Voucher, error) {
	ret := _m.Called(ctx, voucherID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *repository.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*repository.Voucher, error)); ok {
		return rf(ctx, voucherID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *repository.Voucher); ok {
		r0 = rf(ctx, voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *IVoucherRepository) GetAll(ctx context.Context) ([]*repository.Voucher, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*repository.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*repository.Voucher, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*repository.Voucher); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, req
func (_m *IVoucherRepository) GetList(ctx context.Context, req *model.GetVouchersRequest) ([]*repository.Voucher, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []*repository.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetVouchersRequest) ([]*repository.Voucher, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetVouchersRequest) []*repository.Voucher); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetVouchersRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, voucher
func (_m *IVoucherRepository) Update(ctx context.Context, voucher *repository.Voucher) (*repository.Voucher, error) {
	ret := _m.Called(ctx, voucher)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *repository.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Voucher) (*repository.Voucher, error)); ok {
		return rf(ctx, voucher)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Voucher) *repository.Voucher); ok {
		r0 = rf(ctx, voucher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.Voucher) error); ok {
		r1 = rf(ctx, voucher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getQuerySearch provides a mock function with given fields: db, req
func (_m *IVoucherRepository) getQuerySearch(db *gorm.DB, req *model.GetVouchersRequest) *gorm.DB {
	ret := _m.Called(db, req)

	if len(ret) == 0 {
		panic("no return value specified for getQuerySearch")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.GetVouchersRequest) *gorm.DB); ok {
		r0 = rf(db, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// NewIVoucherRepository creates a new instance of IVoucherRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVoucherRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVoucherRepository {
	mock := &IVoucherRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
