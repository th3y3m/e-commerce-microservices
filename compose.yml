version: '3.8'

services:
  postgres_service:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: ECommerceDb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./script.sql:/docker-entrypoint-initdb.d/script.sql
    networks:
      - book_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis_service:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - book_network

  rabbitmq_service:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - book_network
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  product_service:
    build:
      context: .
      dockerfile: service/product/Dockerfile
    ports:
      - "8081:8081"
    environment:
      CONNECTION_STRING: host=postgres_service port=5432 user=postgres password=12345 dbname=ECommerceDb sslmode=disable
      REDIS_URI: ${REDIS_URI}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
      RABBITMQ_URI: ${RABBITMQ_URI}
    depends_on:
      postgres_service:
        condition: service_healthy
      redis_service:
        condition: service_started
      rabbitmq_service:
        condition: service_healthy
    networks:
      - book_network

volumes:
  postgres_data:


networks:
  book_network:
